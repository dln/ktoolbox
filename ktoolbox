#!/bin/bash
set -e

name=${KTOOLBOX_NAME:-toolbox-${USER}}
image="${KTOOLBOX_IMAGE:-dlneintr/toolbox@sha256:70b4cdba2467b4e610f6573cd6e793b5043a671a724f5729869e8faaf5b8630b}"

max_idle_mins="${KTOOLBOX_MAX_IDLE_MINS:-180}"
namespace="${KTOOLBOX_NAMESPACE}"
force=""

context="$(kubectl config current-context)"


function usage() {
  cat <<EOF
Usage:
  $0 [-c image] [-i max_idle_mins] [-n namespace] [-N name] [cmd...]
    -h                 Display this help message.
    -f                 Force recreation of toolbox pod even if running.
    -N NAME            Use given container name instead of the default (toolbox-$USER).
                       Can also be set using KTOOLBOX_NAME environment variable.
    -n NAMESPACE       Use given namespace instead of context default.
                       Can also be set using KTOOLBOX_NAMESPACE environment variable.
    -i MAX_IDLE_MINS   Max idle time in minutes before exiting. ${max_idle_mins} mins by default.
                       Can also be set using KTOOLBOX_MAX_IDLE_MINS environment variable.
    -c IMAGE           Override default container image (${image}).
                       Can also be set using KTOOLBOX_IMAGE environment variable.
EOF
}

while getopts ":hfc:i:n:N:" opt; do
  case ${opt} in
    h )
      usage
      exit 0
      ;;
    n )
      namespace="$OPTARG"
      ;;
    N )
      name="$OPTARG"
      ;;
    i )
      max_idle_mins="$OPTARG"
      ;;
    c )
      image="$OPTARG"
      ;;
    f )
      force="1"
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

old=$(kubectl get pod --namespace "${namespace}" --field-selector=status.phase!=Running -l name=${name} --output='jsonpath={.items..metadata.name}')
if [ "${old}" != "" ]; then
  kubectl delete pod --namespace "${namespace}" --grace-period=0 ${name}
fi

if [[ -n "${force}" ]]; then
  kubectl delete pod --namespace "${namespace}" --grace-period=0 ${name} || true
fi

timestamp=$(date)

kubectl apply --namespace "${namespace}" --record -f - >>/dev/null <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${name}
  labels:
    app: ktoolbox
    name: ${name}
  annotations:
    toolbox/active.context: "${context}"
    toolbox/active.hostname: "${HOSTNAME}"
    toolbox/active.timestamp: "${timestamp}"
    toolbox/active.username: "${USER}"
    toolbox/max.idle.minutes: "${max_idle_mins}"
spec:
  restartPolicy: Never
  terminationGracePeriodSeconds: 1
  containers:
  - image: ${image}
    name: toolbox
    lifecycle:
      preStop:
        exec:
          command: ['/usr/bin/curl', '-X', 'POST', 'http://127.0.0.1:15020/quitquitquit']
    command:
    - /bin/bash
    - -c
    - |
      touch /tmp
      while (find /tmp -maxdepth 0 -mmin -${max_idle_mins} | grep -q '^' ); do
        sleep 60
      done
      echo "Toolbox has been idle for ${max_idle_mins} mins. Shutting down..."
      curl -X POST http://127.0.0.1:15020/quitquitquit
    volumeMounts:
    - name: podinfo
      mountPath: /etc/podinfo
      readOnly: true
    env:
    - name: PROMPT_COMMAND
      value: "touch /tmp"
    - name: KTOOLBOX_CONTEXT
      valueFrom:
        fieldRef:
          fieldPath: metadata.annotations['toolbox/active.context']
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_HOST_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: K8S_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: K8S_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: K8S_POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: K8S_POD_SERVICE_ACCOUNT
      valueFrom:
        fieldRef:
          fieldPath: spec.serviceAccountName
  volumes:
  - name: podinfo
    downwardAPI:
      items:
      - path: "labels"
        fieldRef:
          fieldPath: metadata.labels
      - path: "annotations"
        fieldRef:
          fieldPath: metadata.annotations
EOF

command="exec /bin/bash --login"
if [[ -n "$1" ]]; then
  command="$*"
fi

kubectl wait --namespace "${namespace}" --for condition=Ready pod/${name} >>/dev/null
kubectl exec --namespace "${namespace}" -it -c toolbox ${name} -- /bin/bash -c "${command}"
